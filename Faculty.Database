//Jose Rozo 03/19/2021

import java.io.*;
import java.util.*;

public class Project2
{
   //static Scanner console = new Scanner(System.in);
   public static void main (String[] args) throws IOException
   {
      //Definition
      Faculty[] employee = new Faculty [200];
      
      //Initialize the Object
      for (int index = 0; index < employee.length; index++)
           employee[index] = new Faculty();
         
      Address last = new Address();
      
      //Define and Open Input Files
      
      FileReader inputFile = new FileReader("faculty.txt");
      PrintWriter outputFile = new PrintWriter("report.txt");
      
      Scanner console = new Scanner(System.in);
      
      loadTablesFromFile(employee, last, inputFile);  //6
      
      //Menu
      int option = 0;
      
      while(option != 999)
      {
         //Menu Choices
         System.out.println("\n\n  MENU "); 
       	System.out.println("  1. Delete First Record");
       	System.out.println("  2. Print Sum of Salary");  
       	System.out.println("  3. Find largest Year Hired");
       	System.out.println("  4. Sort the records by Last Name (Ascending)");
       	System.out.println("  5. Sort the records by Salary (Descending)");
       	System.out.println("  6. Print data records to a Report");
       	System.out.println("  7. Delete Record using Key");
       	System.out.println("  8. Add New Record using Key");
       	System.out.println("  9. Display records on the Screen");
         System.out.println("  10. Sort by First Name (Descending)");
       	System.out.println("  Enter: (Number Option) or 999 to Quit");
         System.out.print("\n Select Option: ");
         option = console.nextInt();
         
         // Switch Options
       	switch(option)
       	{
          	case 1:    
						deleteRecordOnTop(employee,last); 	//  (7.1) Procedure
           	      break;
          	case 2:    
						double totalSalary = getSumOfAllSalaries(employee, last);		// (7.2) Procedure
				
						System.out.printf("\nThe sum of all Salaries is: %10.2f %n", totalSalary);
                  break;
						
          	case 3:    
						int location = getLocationOfLargestYearHired(employee, last);	   // (7.3) Procedure
						
		  System.out.printf("%nRecord with the Largest Year Hired %n");
        System.out.printf("%-9s %-15s %-12s %-14s %-12s %-10s %-4s %-9s %-29s %-20s %n", "FacultyId", " LastName", "FirstName", "Department",
                           "Rank", "YearHired", "Sex", "Salary", "ParticipatesInRetirementPlan", "Retirement-Matching");

        System.out.println("--------------------------------------------------------------------------------------------------------------------");
        System.out.printf(
            "%-9s %-15s %-12s %-14s %-12s %-10s %-4s %-9s %-29s %-20s %n",
            employee[location].facultyId, 
				employee[location].lastName,  
	         employee[location].firstName, 
	         employee[location].department,      
	         employee[location].rank,  
	         employee[location].yearHired,  	
	         employee[location].sex,   
	         employee[location].salary,
            employee[location].participantsInPlan,
            employee[location].retirementMatching
								); 
	                  break;
							
          	case 4:    
							sortByLastName(employee, last);	   // (7.4) Procedure
                  	break;
          	case 5:   	
							sortBySalary(employee, last);			// (7.5) Procedure
       	         	break;
          	case 6:    
							printReport(employee, last, outputFile);   		// (7.6) Procedure
	                  break;
          	case 7:     
							deleteRecordUsingKey(employee, last, console);	// (7.7) Procedure
                  	break;
          	case 8:   
							addNewRecordUsingKey(employee, last, console);	// (7.8) procedure
                  	break;
          	case 9: 
						   printAllRecordsToScreen(employee, last); 			// (7.9) Procedure
                  	break;
                     
            case 10: 
                     sortByFirstName(employee, last);
                     break;
                     
            case 999:
                     System.out.println("Good Bye!");
                     break;
          	default:  
                     System.out.println("Incorrect Option");      
       	}
		 }	 

         
      
      //Close Files
      inputFile.close();
      outputFile.close();
   }// Main Ends
   
   //------Methods Section-----
   
   public static void loadTablesFromFile(Faculty[] employee, Address last, FileReader inputFile) //6
   {
      Scanner inFile = new Scanner(inputFile);
      
      //load table
      
      while(inFile.hasNext() )
    {
         last.value++;
         
      //Load the Entire Record
      employee[last.value].facultyId = inFile.next();
      employee[last.value].lastName = inFile.next();
      employee[last.value].firstName = inFile.next();
      employee[last.value].department = inFile.next();
      employee[last.value].rank = inFile.next();
      employee[last.value].yearHired = inFile.nextInt();
      employee[last.value].sex = inFile.next().charAt(0);
      employee[last.value].salary = inFile.nextDouble();
      employee[last.value].participantsInPlan = inFile.next();
      employee[last.value].retirementMatching = inFile.nextDouble();
    }
   
     System.out.println("Tables with Records was Loaded \n");
   }
   
   //Print all records in screen
   
   public static void printAllRecordsToScreen(Faculty[] employee, Address last) //7.9
   {
      System.out.println("                         Employees Information");
      System.out.printf("%-9s %-15s %-12s %-14s %-12s %-10s %-4s %-9s %-29s %-20s %n", "FacultyId", " LastName", "FirstName", "Department",
                           "Rank", "YearHired", "Sex", "Salary", "ParticipatesInRetirementPlan", "Retirement-Matching");
      
      for (int index = 0; index <= last.value; index++)
         System.out.printf("%-11s%-15s%-13s%-15s%-13s%-11d%-5s%-10.2f%-30s%-10.2f %n",
         employee[index].facultyId,
         employee[index].lastName,
         employee[index].firstName,
         employee[index].department,
         employee[index].rank,
         employee[index].yearHired,
         employee[index].sex,
         employee[index].salary,
         employee[index].participantsInPlan,
         employee[index].retirementMatching
         );
                
        
        
    }
    
    //7.1
	public static void  deleteRecordOnTop(Faculty[] employee, Address last)
	{
	   for (int index = 0; index <= last.value; index++)
            employee[index] = employee[index+1];
      
      last.value--;
      System.out.println("\n Record on Top was Deleted!");
	}
 
 //7.2
 	public static double getSumOfAllSalaries(Faculty[] employee, Address last)
 	{
  		double totalSalary = 0;
		 
		 for (int index = 0; index <= last.value; index++)
            totalSalary  += employee[index].salary;

       return totalSalary;
        
 	}	
   
   // 7.3
 	public static int getLocationOfLargestYearHired(Faculty[] employee, Address last)
	{
	   int largestYearHired = employee[0].yearHired;
      int location = 0;
      
         for (int index = 0; index <= last.value; index++)
            if (largestYearHired < employee[index].yearHired)
            {
               largestYearHired = employee[index].yearHired;
               location = index;
            }
				
		return location;
	}
   
   // 7.4
	public static void sortByLastName(Faculty[] table, Address last)
	{
	   Faculty temp = new Faculty();
      
         for (int outer = last.value; outer > 0; outer--)
            for (int inner = 0; inner < outer; inner++)
              if (table[inner].lastName.compareTo(table[inner+1].lastName) > 0)
               {
                  temp = table[inner];
                  table[inner] = table[inner+1];
                  table[inner+1] = temp;
               }
         System.out.println("\n Records were Sorted by Last Name in Ascending Order!");
	}
   
   //7.10
   public static void sortByFirstName(Faculty[] table, Address last)
   {
      Faculty temp = new Faculty();
      
      for (int outer = last.value; outer > 0; outer--)
      for (int inner = 0; inner < outer; inner++)
      if (table[inner].firstName.compareTo(table[inner+1].firstName)> 0)
         {
         temp = table[inner];
         table[inner] = table[inner+1];
         table[inner+1] = temp;
         }
         System.out.println("\n Table was sorted by the First Names! (Descending)");
    }
      

   // 7.5
	public static void sortBySalary(Faculty[] table, Address last)
   {
	   Faculty temp = new Faculty();
      
      for (int outer = last.value; outer > 0; outer--)
         for (int inner = 0; inner < outer; inner++)
           if(table[inner].salary < table[inner+1].salary)
               {
                  temp = table[inner];
                  table[inner] = table[inner+1];
                  table[inner+1] = temp;
               }
         System.out.println("\n Records were Sorted by Salary in Descending Order!");	
	}
   
   
   // 7.6
	public static void printReport(Faculty[] employee, Address last, PrintWriter outputFile)
	{
	   outputFile.printf("%n%70s %n", "FACULTY INFORMATION - REPORT");
      outputFile.printf("%-9s %-15s %-12s %-14s %-12s %-10s %-4s %-9s %-29s %-20s %n", "FacultyId", " LastName", "FirstName", "Department",
                           "Rank", "YearHired", "Sex", "Salary", "ParticipatesInRetirementPlan", "Retirement-Matching");
      outputFile.println("--------------------------------------------------------------------------------------------------------------------");
      for (int index = 0; index <= last.value; index++)          outputFile.printf(
            "%-9s %-15s %-12s %-14s %-12s %-10s %-4s %-9s %-29s %-20s %n",
            employee[index].facultyId, 
				employee[index].lastName,  
	         employee[index].firstName, 
	         employee[index].department,      
	         employee[index].rank,  
	         employee[index].yearHired,  	
	         employee[index].sex,   
	         employee[index].salary,
            employee[index].participantsInPlan,
            employee[index].retirementMatching
            );  
	}	
   
   // 7.7 Delete Record using Key
	public static void deleteRecordUsingKey(Faculty [] employee, Address last, Scanner console)
   {
         String key;  
         int location = -1;
         char respond = 'n';
      
         System.out.print("To Delete a Record using Key, Enter Key or (99999) to Cancel: ");
         key = console.next();
         
         if (!(key.compareTo("99999")== 0))
         {
            location = findRecordWithKey(employee, last, key);  		// (7.7.1) find record
            
            if(!(location == -1))
            {   
                System.out.println("\n FacultyId LastName    FirstName    Department     Rank      yearHired      Sex       Salary       ParticipantsInPlan       RetirementMatching      ");
                System.out.printf("%-11s%-15s%-13s%-15s%-13s%-11d%-5s%-10.2f%-30s%-10.2f %n",
                employee[location].facultyId,
                employee[location].lastName,
                employee[location].firstName,
                employee[location].department,
                employee[location].rank,
                employee[location].yearHired,
                employee[location].sex,
                employee[location].salary,
                employee[location].participantsInPlan,
                employee[location].retirementMatching );
                
                System.out.println("\nDo you want to delete this record from the table (y) or (n)?");
                respond = console.next().charAt(0);
         
                if (respond == 'y' || respond == 'Y')
                {
                   deleteRecordAtLocation(employee, last, location); //  (7.7.2) delete record
                   System.out.println("\nRecord was deleted!!!");
                }
                else
                   System.out.println("\nOperation was cancel");
            }
            else
               System.out.println("Record was not found");
         }
         else
            System.out.println("\nOperation was cancel");
    }
    
    
    // 7.7.1
	public static int findRecordWithKey(Faculty [] table, Address last, String key)
    {
         int location = -1; 
         for (int index = 0; index <= last.value; index++)
            if (key.compareTo(table[index].facultyId)== 0)      // compare Primary Key
            {
               location = index;
               index = last.value;
            }
         return location;
    }
    
    // 7.7.2
	public static void deleteRecordAtLocation(Faculty [] table, Address last, int location)
    {
      for (int index = location; index <= last.value; index++)
          table[index] = table[index+1];
         
      last.value--;
    } 
    
    // 7.8
	public static void addNewRecordUsingKey(Faculty [] table, Address last, Scanner console)
	{
		   String key;             // Creata a Key Variable for New Record 
         boolean cancel = false; // Create a cancel for True or False respond
         int location = -1;      // Create a location variable use to check if Key exists already
         char respond = 'n';		// Create a respond variable to check if operation will contineu
      
         do
         {
            System.out.print("\nTo Add a New Record, Enter an (Integer Number as) Key or (99999) to Cancel: ");
            key = console.next();
         
            if ((key.compareTo("99999")!= 0))
            {
               location = findRecordWithKey(table, last, key);  // (7.7.1) find record
 
               if(location != -1)
                  System.out.println("\n Key Already Exists, Try another Key!!!");
            }
            else
               cancel = true;
         }
         while((location != -1) && !(cancel)); // Repeat Do-While, Key is not available OR process not cancelled      
         if (location == -1 && !(cancel))
         {
				System.out.println("\n Successful, Record Key is valid!");
				System.out.println("Proceed to Enter the rest of the FIELDS in the Record next");
				
            // Create an Empty Record to populate with Data
            Faculty newRecord = new Faculty();
         
			   // Data Entry
				
				// Add the KEY already identified
            newRecord.facultyId = key;
				
				// Add the rest of the Record's Data

            System.out.print("\nEnter employee lastName (use a hyphen(-) for each blank in String): ");
            newRecord.lastName = console.next();

            System.out.print("\nEnter employee firstName (String): ");
            newRecord.firstName = console.next();
          
            System.out.print("\nEnter employee department (String): ");
            newRecord.department = console.next();
          
            System.out.print("\nEnter employee rank (String): ");
            newRecord.rank = console.next();
				
				System.out.print("\nEnter employee yearHired (Integer): ");
            newRecord.yearHired = console.nextInt();
				
				System.out.print("\nEnter employee sex (char): ");
            newRecord.sex = console.next().charAt(0);
            
            System.out.print("\nEnter employee salary (double):  ");
            newRecord.salary = console.nextDouble();
            
            System.out.print("\nEnter employee participantsInPlan (String):  ");
            newRecord.participantsInPlan = console.next();
            
            System.out.print("\nEnter employee retirementMatching (double):  ");
            newRecord.retirementMatching = console.nextDouble();


     
            System.out.print("\nDo you want to add this record to the table (y) or (n)?");
            respond = console.next().charAt(0);
         
            if (respond == 'y' || respond == 'Y')
            {
               // append record at the bottom
               table[last.value+1] = newRecord;
               last.value++;
               
               System.out.println("\nNew Record was Added");
            }
            else
               System.out.println("\nOperation was canceled");
               
         }
         else
            System.out.println("\nOperation was canceled");
      }

	
	
	
	
		
		
} // END Class
          
